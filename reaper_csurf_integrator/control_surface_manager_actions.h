//
//  control_surface_manager_actions.h
//  reaper_csurf_integrator
//
//

#ifndef control_surface_manager_actions_h
#define control_surface_manager_actions_h

#include "control_surface_base_actions.h"

extern Manager* TheManager;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MapTrackAndFXToWidgets  : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(RealSurface* surface, MediaTrack* track, Page* page) override
    {
        if(1 == DAW::CountSelectedTracks(nullptr))
            page->MapTrackAndFXToWidgets(surface, track);
        else
            page->UnmapWidgetsFromTrack(surface, track);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class SetShowFXWindows : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        page->SetShowFXWindows(value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Shift : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        page->SetShift(value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Option : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        page->SetOption(value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Control : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        page->SetControl(value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Alt : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        page->SetAlt(value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Latched : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        
    }

    /*
private:
    clock_t lastPressed_ = clock();
public:
    
    virtual void SetValue(string zoneName, string surfaceName, double value) {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        if(value != 0)
        {
            lastPressed_ = clock();
            SetValue(zoneName, surfaceName, value);
            GetLayer()->SetWidgetValue(zoneName, surfaceName, widgetName, value);
        }
        else
        {
            if(clock() - lastPressed_ >  CLOCKS_PER_SEC / 4)
            {
                SetValue(zoneName, surfaceName, value);
                GetLayer()->SetWidgetValue(zoneName, surfaceName, widgetName, value);
            }
        }
    }
     */
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class LatchedZoom : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        
    }

    /*
public:
    
    virtual void SetValue(string zoneName, string surfaceName, double value) override
    {
        GetLayer()->SetZoom(zoneName, surfaceName, value);
    }
     */
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class LatchedScrub : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        
    }

    /*
public:
    
    virtual void SetValue(string zoneName, string surfaceName, double value) override
    {
        GetLayer()->SetScrub(zoneName, surfaceName, value);
    }
     */
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class NextPage : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        TheManager->NextPage();
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TrackBank : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        /*
        if(params.size() > 1)
            page->AdjustTrackBank(atol(params[1].c_str()));
         */
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class PinSelectedTracks : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        page->PinSelectedTracks();
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class UnpinSelectedTracks : public Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    void Do(Widget* widget, Page* page, WidgetContext & context, double value) override
    {
        page->UnpinSelectedTracks();
    }
};








/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////























/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Shift_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    Shift_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->SetShift(zoneName, surfaceName, value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Option_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    Option_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->SetOption(zoneName, surfaceName, value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Control_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    Control_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->SetControl(zoneName, surfaceName, value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Alt_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    Alt_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->SetAlt(zoneName, surfaceName, value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Latched_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
private:
    clock_t lastPressed_ = clock();
public:
    Latched_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void SetValue(string zoneName, string surfaceName, double value) {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        if(value != 0)
        {
            lastPressed_ = clock();
            SetValue(zoneName, surfaceName, value);
            GetLayer()->SetWidgetValue(zoneName, surfaceName, widgetName, value);
        }
        else
        {
            if(clock() - lastPressed_ >  CLOCKS_PER_SEC / 4)
            {
                SetValue(zoneName, surfaceName, value);
                GetLayer()->SetWidgetValue(zoneName, surfaceName, widgetName, value);
            }
        }
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class LatchedZoom_Action : public Latched_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    LatchedZoom_Action(Layer* layer) : Latched_Action(layer)  {}
    
    virtual void SetValue(string zoneName, string surfaceName, double value) override
    {
        GetLayer()->SetZoom(zoneName, surfaceName, value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class LatchedScrub_Action : public Latched_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    LatchedScrub_Action(Layer* layer) : Latched_Action(layer)  {}
    
    virtual void SetValue(string zoneName, string surfaceName, double value) override
    {
        GetLayer()->SetScrub(zoneName, surfaceName, value);
    }
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class SetShowFXWindows_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    SetShowFXWindows_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual double GetValue (string zoneName, string surfaceName, string widgetName) override { return GetLayer()->IsShowFXWindows(zoneName, surfaceName); }
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->SetShowFXWindows(zoneName, surfaceName, value);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class NextLayer_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    NextLayer_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->GetManager()->NextLayer();
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TrackBank_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
private:
    int stride_ = 0;

public:
    TrackBank_Action(Layer* layer, string paramStr) : Double_Action(layer)
    {
        stride_ =  atol(paramStr.c_str());
    }
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->AdjustTrackBank(zoneName, surfaceName, stride_);
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class PinSelectedTracks_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    PinSelectedTracks_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
       GetLayer()->PinSelectedTracks();
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class UnpinSelectedTracks_Action : public Double_Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
public:
    UnpinSelectedTracks_Action(Layer* layer) : Double_Action(layer)  {}
    
    virtual void Do(double value, string zoneName, string surfaceName, string widgetName) override
    {
        GetLayer()->UnpinSelectedTracks();
    }
};

#endif /* control_surface_manager_actions_h */
